{"version":3,"sources":["Firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","input","setInput","Modal","onClose","e","className","placeholder","todo","value","onChange","event","target","Button","variant","color","onClick","collection","doc","id","set","merge","type","List","ListItem","ListItemAvatar","ListItemText","primary","secondary","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","disabled","preventDefault","add","timestamp","FieldValue","serverTimestamp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mWAgBeA,EAbKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAGIC,Y,iBCLjBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACHC,SAAU,WACVC,MAAO,IACPC,gBAAiBJ,EAAMK,QAAQC,WAAWL,MAC1CM,OAAQ,iBACRC,UAAWR,EAAMS,QAAQ,GACzBC,QAASV,EAAMW,QAAQ,EAAE,EAAE,QAkDpBC,MA9Cf,SAAcC,GACV,IAAMC,EAAUhB,IADC,EAEOiB,oBAAS,GAFhB,mBAEVC,EAFU,KAEJC,EAFI,OAGSF,qBAHT,mBAGVG,EAHU,KAGHC,EAHG,KAkBjB,OACI,oCACA,kBAACC,EAAA,EAAD,CACIJ,KAAQA,EACRK,QAAW,SAAAC,GAAC,OAAIL,GAAQ,KAExB,yBAAKM,UAAaT,EAAQb,OACtB,8BACI,2BAAOuB,YAAeX,EAAMY,KAAKA,KAAMC,MAASR,EAAOS,SAAY,SAAAC,GAAK,OAAIT,EAASS,EAAMC,OAAOH,UAClG,kBAACI,EAAA,EAAD,CAAQC,QAAU,YAAYC,MAAQ,UAAUC,QAlBjD,WAEf/C,EAAGgD,WAAW,SAASC,IAAItB,EAAMY,KAAKW,IAAIC,IAAI,CAC1CZ,KAAMP,GACP,CAACoB,OAAO,IAEXrB,GAAQ,IAY+EsB,KAAO,UAA9E,kBAKZ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,CAAcC,QAAW/B,EAAMY,KAAKA,KAAMoB,UAAY,wBAE1D,4BAAQZ,QAAW,SAAAX,GAAC,OAAIL,GAAQ,KAAhC,QACA,kBAAC,IAAD,CAAmBgB,QAAW,SAAAL,GAAK,OAAI1C,EAAGgD,WAAW,SAASC,IAAItB,EAAMY,KAAKW,IAAIU,e,iCCE9EC,MAtDf,WAAgB,IAAD,EAEahC,mBAAS,IAFtB,mBAENiC,EAFM,KAECC,EAFD,OAIalC,mBAAS,IAJtB,mBAING,EAJM,KAICC,EAJD,KA2Bb,OAnBA+B,qBAAU,WAERhE,EAAGgD,WAAW,SAASiB,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAC7DJ,EAASI,EAASC,KAAKC,KAAI,SAAApB,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIX,KAAMU,EAAIqB,OAAO/B,eAElE,IAeD,yBAAKF,UAAU,OACb,2CACA,8BACE,kBAACkC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,qBACA,kBAACC,EAAA,EAAD,CAAOjC,MAASR,EAAOS,SAAY,SAAAC,GAAK,OAAIT,EAASS,EAAMC,OAAOH,WAEpE,kBAACI,EAAA,EAAD,CAAQ8B,UAAa1C,EAAOqB,KAAO,SAASN,QApBlC,SAACL,GAEfA,EAAMiC,iBAEN3E,EAAGgD,WAAW,SAAS4B,IAAI,CACzBrC,KAAMP,EACN6C,UAAW5E,IAASU,UAAUmE,WAAWC,oBAG3ChB,EAAS,GAAD,mBAAKD,GAAL,CAAY9B,KACpBC,EAAS,KAU2DY,QAAQ,YAAYC,MAAM,WAA1F,aAMF,gCAKGgB,EAAMO,KAAI,SAAA9B,GAAI,OACb,kBAAC,EAAD,CAAMA,KAAQA,UC1CJyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9fe7cdfd.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyDMzFy9s6OxUOJ-ikef8Kx-ofyPf13jRvg\",\r\n    authDomain: \"todo-app-cp-8cccd.firebaseapp.com\",\r\n    databaseURL: \"https://todo-app-cp-8cccd.firebaseio.com\",\r\n    projectId: \"todo-app-cp-8cccd\",\r\n    storageBucket: \"todo-app-cp-8cccd.appspot.com\",\r\n    messagingSenderId: \"54172869151\",\r\n    appId: \"1:54172869151:web:f3d93870ef8958fa0feb2a\",\r\n    measurementId: \"G-LSD02W0MZG\"\r\n\r\n});\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import { ListItem, ListItemText, List, ListItemAvatar, Modal, makeStyles, Button} from '@material-ui/core'\r\nimport \"./Todo.css\";\r\nimport React, {useState} from 'react'; \r\nimport db from \"./Firebase\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport { OpenInBrowser } from '@material-ui/icons';\r\n/*Breaks up the code so that it looks cleaner and \r\nmakes it easier to style it without making the main code look messy*/\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: \"absolute\",\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: \"2px solid #000\",\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2,4,3),\r\n    },\r\n}));\r\n\r\nfunction Todo(props) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const [input, setInput] = useState();\r\n\r\n    const handleOpen = () => {\r\n        setOpen (true);\r\n    };\r\n\r\nconst updateTodo = () => {\r\n    //Update the todo with the new input text\r\n    db.collection(\"todos\").doc(props.todo.id).set({\r\n        todo: input\r\n    }, {merge: true});\r\n\r\n    setOpen(false);\r\n}\r\n\r\n    return (\r\n        <>\r\n        <Modal\r\n            open = {open}\r\n            onClose = {e => setOpen(false)}\r\n        >\r\n            <div className = {classes.paper}>\r\n                <form>\r\n                    <input placeholder = {props.todo.todo} value = {input} onChange = {event => setInput(event.target.value)}/>\r\n                    <Button variant = \"contained\" color = \"primary\" onClick = {updateTodo} type = \"submit\">Update Todo</Button>\r\n                </form>\r\n    \r\n            </div>     \r\n        </Modal>\r\n        <List>\r\n            <ListItem>\r\n                <ListItemAvatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary = {props.todo.todo} secondary = \"Dummy headline >:(\"/>\r\n            </ListItem>\r\n            <button onClick = {e => setOpen(true)}>Edit</button>\r\n            <DeleteForeverIcon onClick = {event => db.collection(\"todos\").doc(props.todo.id).delete()} />\r\n            {/*Creates an delete button that deletes the todos from the database and the page*/}\r\n        </List>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React, { useEffect, useState } from 'react';\nimport Todo from \"./Todo\";\nimport {Button, FormControl, Input, InputLabel } from \"@material-ui/core\";\nimport './App.css';\nimport db from \"./Firebase\";\nimport firebase from \"firebase\"; \n\nfunction App() {\n\n  const [todos, setTodos] = useState([]); \n  //Creates an array that let's you append to it live (Don't need to refrech it)\n  const [input, setInput] = useState(\"\"); //Makes so that the input field is empty\n\n  //When the app loads, we need to listen to the database and fetch new todos as they get added/removed\n  \n  useEffect(() => {\n    //This code here fires when the app.js loads\n    db.collection(\"todos\").orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({id: doc.id, todo: doc.data().todo}))) \n    })\n  }, []);\n\n  const addTodo = (event) => {\n    //This will fire of when we click the button\n    event.preventDefault();      //Stops the refreching\n\n    db.collection(\"todos\").add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n\n    setTodos([...todos, input]); //Appends the new todo (from input) to the old array\n    setInput(\"\"); //Clears the input\n  }\n  return (\n    <div className=\"App\">\n      <h1>Hello World</h1>\n      <form>\n        <FormControl>\n          <InputLabel>Write a todo</InputLabel>\n          <Input value = {input} onChange = {event => setInput(event.target.value)} />\n        </FormControl>\n        <Button disabled = {!input} type = \"submit\" onClick = {addTodo} variant=\"contained\" color=\"primary\">\n          Add Todo\n        </Button>\n      </form>\n\n\n      <ul> {/*Were the todos will appear*/}\n\n      {/* A loop that takes one element a \n      time and pushes it in a HTML list and prints it out*/}\n\n        {todos.map(todo => (\n          <Todo todo = {todo}/> //Calls for the todo prop in the Todo file\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}